AWSTemplateFormatVersion: 2010-09-09
Description: >
  Create an example ASG with conditional Instance Override

Parameters:
  Environment:
    Description: Which environment is this?
    Type: String
    AllowedValues:
      - example
  Stack:
    Type: String
    Default: example-asg
  Region:
    Description: Region this environment is being configured in
    Type: AWS::SSM::Parameter::Value<String>
    Default: /base/region
  KeyName:
    Description: AWS Region used for the environment
    Type: AWS::SSM::Parameter::Value<String>
    Default: /base/example/ec2-keyname
  ImageId:
    Description: AMI ImageId to use. Latest Amazon Amz2 arm64
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-arm64-gp2
  InstanceType1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/type1
  InstanceWeight1:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/weight1
  InstanceType2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/type2
  InstanceWeight2:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/weight2
  InstanceType3:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/type3
  InstanceWeight3:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/instance/weight3
  DemandMin:
    Description: ASG parameters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/demand/min
  DemandPercent:
    Description: ASG parameters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/demand/percent
  AsgMin:
    Description: ASG parameters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/min
  AsgMax:
    Description: ASG parameters
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/max
  AutoScaling:
    Description: Enable Individual Step AutoScaling
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/enabled
  DynamicScaling:
    Description: Enabled MultiDimenisional Step AutoScaling
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/autoscaling/dynamic
  CpuLimitHigh:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/asg/cpu/high
  CpuLimitLow:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/asg/cpu/low
  RequestLimitHigh:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/alb/requests/high
  RequestLimitLow:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/alb/requests/low
  RequestLatencyHigh:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/alb/latency/high
  RequestLatencyLow:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /example-asg/alb/latency/low

Conditions:
  AutoScaling: !Equals [!Ref AutoScaling, 'true']
  DynamicScaling: !Equals [!Ref DynamicScaling, 'true']
  InstanceType2: !Not [!Equals ['unused', !Ref InstanceType2]]
  InstanceType3: !Not [!Equals ['unused', !Ref InstanceType3]]

Resources:
  AlbSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Stack} Internal ALB Security Group
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: This is an internal ALB, so permit ingress only within VPC
      Tags:
        - Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}-alb
        - Key: Stack
          Value: !Ref Stack
        - Key: Environment
          Value: !Ref Environment

  AsgSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MetaBase ASG Security Group
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSecurity
          Description: !Sub Allow http from ${Stack} ALB
      Tags:
        - Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}-asg
        - Key: Stack
          Value: !Ref Stack
        - Key: Environment
          Value: !Ref Environment

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref AlbSecurity
      Subnets:
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-A
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-B
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-C
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: false
        - Key: routing.http2.enabled
          Value: true
        - Key: idle_timeout.timeout_seconds
          Value: 60
        - Key: routing.http.desync_mitigation_mode
          Value: strictest
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: true
        - Key: routing.http.preserve_host_header.enabled
          Value: true
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: true
        - Key: routing.http.xff_header_processing.mode
          Value: preserve # preserve for internal, append for external facing ALBs
        - Key: routing.http.xff_client_port.enabled
          Value: false # Always False
      Tags:
        - Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}
        - Key: Stack
          Value: !Ref Stack
        - Key: Environment
          Value: !Ref Environment

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTarget
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP

  HttpTarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${Environment}-VpcId
      HealthCheckIntervalSeconds: 300 # This healthcheck is deliberately slow
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: load_balancing.algorithm.type
          Value: least_outstanding_requests
        - Key: slow_start.duration_seconds
          Value: 0
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}
        - Key: Stack
          Value: !Ref Stack
        - Key: Environment
          Value: !Ref Environment

  Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - Fn::ImportValue: !Sub ${Environment}-Managed-Machine-Policy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Tags:
        - Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}-asg
        - Key: Stack
          Value: !Ref Stack
        - Key: Environment
          Value: !Ref Environment

  Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role

  Asg:
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref AsgMin
        MaxBatchSize: 2
        PauseTime: PT04M
        SuspendProcesses:
          - AlarmNotification
          - AZRebalance
          - ScheduledActions
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Sub ${AWS::Region}a
        - !Sub ${AWS::Region}b
        - !Sub ${AWS::Region}c
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-A
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-B
        - Fn::ImportValue: !Sub ${Environment}-Private-Subnet-C
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Ref InstanceType1
              WeightedCapacity: !Ref InstanceWeight1
            - InstanceType: !If [InstanceType2, !Ref InstanceType2, !Ref AWS::NoValue]
              WeightedCapacity: !If [InstanceType2, !Ref InstanceWeight2, !Ref AWS::NoValue]
            - InstanceType: !If [InstanceType3, !Ref InstanceType3, !Ref AWS::NoValue]
              WeightedCapacity: !If [InstanceType3, !Ref InstanceWeight3, !Ref AWS::NoValue]
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref DemandMin
          OnDemandPercentageAboveBaseCapacity: !Ref DemandPercent
          SpotAllocationStrategy: capacity-optimized-prioritized # optimize for capacity, then Overrides order
      MinSize: !Ref AsgMin
      MaxSize: !Ref AsgMax
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      MaxInstanceLifetime: 2592000 # 30 days in seconds
      CapacityRebalance: true # Replace spots pre-emptively if running low.
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
      TargetGroupARNs:
        - !Ref HttpTarget
      Tags:
        - PropagateAtLaunch: True
          Key: Name
          Value: !Sub ${Region}-${Environment}-${Stack}
        - PropagateAtLaunch: True
          Key: Stack
          Value: !Ref Stack
        - PropagateAtLaunch: True
          Key: Environment
          Value: !Ref Environment

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Region}-${Environment}-${Stack}
      LaunchTemplateData:
        ImageId: !Ref ImageId
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref Profile
        SecurityGroupIds:
          - !Ref AsgSecurity
          - Fn::ImportValue: !Sub ${Environment}-DefaultSecurity
        EbsOptimized: true
        BlockDeviceMappings:
          - DeviceName: /dev/xvda # or /dev/sda1 for some linux flavours
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
        Monitoring:
          Enabled: false # Normally this would be true, but $$$
        HibernationOptions:
          Configured: false # should be able to set true on AmazonLinux and AWSCLI V2, but you can't hibernate spots
        InstanceInitiatedShutdownBehavior: terminate # or stop
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: optional # or "required" for V2 sdk etc. "optional" for anything that may break things depending on sdk in use
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -x
            exec > >(tee /var/log/user-data.log|logger -t '[user-data]' -s 2>/dev/console) 2>&1
            echo Do your bootstrap code here

            yum install nc pv stress -y

            cat << EOF > /tmp/http.resp
            HTTP/1.1 200 OK
            Content-Type: text/plain; charset=UTF-8
            Server: ratelimited NetCat
            X-Clacks-Overhead: GNU Terry Pratchett

            This instance is an instance of ${Stack} in ${Environment} ${Region}
            This reponse should take just over 2seconds
            EOF

            while true; do pv -q --rate-limit 100 /tmp/http.resp | sudo nc -l 80; done &

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${Region}-${Environment}-${Stack}
              - Key: Stack
                Value: !Ref Stack
              - Key: Environment
                Value: !Ref Environment
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${Region}-${Environment}-${Stack}
              - Key: Stack
                Value: !Ref Stack
              - Key: Environment
                Value: !Ref Environment

  ##
  ## Individual Stepscaling
  ##
  ScaleOutCpu:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref Asg
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 360 # Allow 6 mins to come into service
      StepAdjustments:
        - MetricIntervalLowerBound: 0 # Same as threshold
          MetricIntervalUpperBound: 5 # 5 above base
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 5
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 3

  ScaleOutCpuAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-CPU-Scale-Out
      AlarmDescription: !Sub ${Stack} in ${Environment} CPU is over ${CpuLimitHigh}
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2 # 2 mins before scaling out
      Threshold: !Ref CpuLimitHigh
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutCpu
      Metrics:
        - Id: cpu
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: CPUUtilization
              Namespace: AWS/EC2
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref Asg
            Period: 60
            Stat: Average

  ScaleInCpu:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '600' # No more actions for 10 mins
      AutoScalingGroupName: !Ref Asg
      ScalingAdjustment: -1

  ScaleInCpuAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-CPU-Scale-In
      AlarmDescription: !Sub ${Stack} in ${Environment} CPU is under ${CpuLimitLow}
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 6 # 6 mins before scaling down
      Threshold: !Ref CpuLimitLow
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleInCpu
      Metrics:
        - Id: cpu
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: CPUUtilization
              Namespace: AWS/EC2
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref Asg
            Period: 60
            Stat: Average

  ScaleOutLatency:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref Asg
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 360 # Allow 6 mins to come into service
      StepAdjustments:
        - MetricIntervalLowerBound: 0 # Same as threshold
          MetricIntervalUpperBound: 0.5 # 30 above base
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 0.5
          MetricIntervalUpperBound: 1.2
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 1.2
          ScalingAdjustment: 3

  ScaleOutLatencyAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Latency-Scale-Out
      AlarmDescription: !Sub ${Stack} in ${Environment} latency is more than ${RequestLatencyHigh}s
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2 # 2 mins before scaling out
      Threshold: !Ref RequestLatencyHigh
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutLatency
      Metrics:
        - Id: latency
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: TargetResponseTime
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt Alb.LoadBalancerFullName
            Period: 60
            Stat: Average

  ScaleInLatency:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: 600 # No more actions for 10 mins
      AutoScalingGroupName: !Ref Asg
      ScalingAdjustment: -1

  ScaleInLatencyAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Latency-Scale-In
      AlarmDescription: !Sub ${Stack} in ${Environment} latency is less that ${RequestLatencyLow}s
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 6 # 6 mins before scaling down
      Threshold: !Ref RequestLatencyLow
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleInLatency
      Metrics:
        - Id: latency
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: TargetResponseTime
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt Alb.LoadBalancerFullName
            Period: 60
            Stat: Average

  ScaleOutRequests:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref Asg
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 360 # Allow 6 mins to come into service
      StepAdjustments:
        - MetricIntervalLowerBound: 0 # Same as threshold
          MetricIntervalUpperBound: 10 # 10rpm above threshold
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 10
          MetricIntervalUpperBound: 20
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 20
          ScalingAdjustment: 3

  ScaleOutRequestsAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Requests-Scale-Out
      AlarmDescription: !Sub ${Stack} in ${Environment} is receiving more than ${RequestLimitHigh}
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2 # 2 mins before scaling out
      Threshold: !Ref RequestLimitHigh
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutRequests
      Metrics:
        - Id: requests
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: RequestCountPerTarget
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt HttpTarget.TargetGroupFullName
            Period: 60
            Stat: Sum

  ScaleInRequests:
    Condition: AutoScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '600' # No more actions for 10 mins
      AutoScalingGroupName: !Ref Asg
      ScalingAdjustment: -1

  ScaleInRequestsAlarm:
    Condition: AutoScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Requests-Scale-In
      AlarmDescription: !Sub ${Stack} in ${Environment} is receiving fewer than ${RequestLimitLow} requests per instance
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 6 # 6 mins before scaling down
      Threshold: !Ref RequestLimitLow
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleInRequests
      Metrics:
        - Id: requests
          ReturnData: true
          MetricStat:
            Metric:
              MetricName: RequestCountPerTarget
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt HttpTarget.TargetGroupFullName
            Period: 60
            Stat: Sum

  ##
  ## MultiDimensional StepScaling
  ##
  ScaleOut:
    Condition: DynamicScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: !Ref Asg
      MetricAggregationType: Average
      EstimatedInstanceWarmup: 360 # Allow 6 mins to come into service
      StepAdjustments:
        - MetricIntervalLowerBound: 0 # Same as threshold
          MetricIntervalUpperBound: 30 # 30 above base
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 30
          MetricIntervalUpperBound: 90
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 90
          ScalingAdjustment: 3

  ScaleIn:
    Condition: DynamicScaling
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '600' # No more actions for 10 mins
      AutoScalingGroupName: !Ref Asg
      ScalingAdjustment: -1

  ScaleOutAlarm:
    Condition: DynamicScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Scale-Out
      AlarmDescription: !Sub ${Stack} in ${Environment} is receiving more than ${RequestLimitHigh} or Latency is more than ${RequestLatencyHigh}s or CPU is above ${CpuLimitHigh}
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2 # 2 mins before scaling out
      Threshold: 100
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOut
      Metrics:
        - Id: calc
          Expression: IF(norm_cpu>norm_lat AND norm_cpu>norm_req, norm_cpu, IF(norm_lat>norm_req, norm_lat, norm_req))
          Label: Scale Out
        - Id: cpu
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: CPUUtilization
              Namespace: AWS/EC2
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref Asg
            Period: 60
            Stat: Average
        - Id: norm_cpu
          ReturnData: false
          Expression: !Sub cpu/${CpuLimitHigh}*100
        - Id: requests
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: RequestCountPerTarget
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt HttpTarget.TargetGroupFullName
            Period: 60
            Stat: Sum
        - Id: norm_req
          ReturnData: false
          Expression: !Sub requests/${RequestLimitHigh}*100
        - Id: latency
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: TargetResponseTime
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt Alb.LoadBalancerFullName
            Period: 60
            Stat: Average
        - Id: norm_lat
          ReturnData: false
          Expression: !Sub latency/${RequestLatencyHigh}*100

  ScaleInAlarm:
    Condition: DynamicScaling
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${Environment}-${Stack}-Scale-In
      AlarmDescription: !Sub ${Stack} in ${Environment} is receiving fewer than ${RequestLimitLow} and Latency is less that ${RequestLatencyLow}s and CPU is below ${CpuLimitLow}
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 6 # 6 mins before scaling down
      Threshold: 100
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleIn
      Metrics:
        - Id: calc
          Expression: IF(norm_cpu>norm_lat AND norm_cpu>norm_req, norm_cpu, IF(norm_lat>norm_req, norm_lat, norm_req))
          Label: Scale In
        - Id: cpu
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: CPUUtilization
              Namespace: AWS/EC2
              Dimensions:
                - Name: AutoScalingGroupName
                  Value: !Ref Asg
            Period: 60
            Stat: Average
        - Id: norm_cpu
          ReturnData: false
          Expression: !Sub cpu/${CpuLimitLow}*100
        - Id: requests
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: RequestCountPerTarget
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: TargetGroup
                  Value: !GetAtt HttpTarget.TargetGroupFullName
            Period: 60
            Stat: Sum
        - Id: norm_req
          ReturnData: false
          Expression: !Sub requests/${RequestLimitLow}*100
        - Id: latency
          ReturnData: false
          MetricStat:
            Metric:
              MetricName: TargetResponseTime
              Namespace: AWS/ApplicationELB
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt Alb.LoadBalancerFullName
            Period: 60
            Stat: Average
        - Id: norm_lat
          ReturnData: false
          Expression: !Sub latency/${RequestLatencyLow}*100

Outputs:
  AlbSecurity:
    Description: Security Group for ALB
    Value: !Ref AlbSecurity
    Export:
      Name: !Sub ${Environment}-SecurityGroup-${Stack}-alb
  Security:
    Description: Security Group for ASG Instances
    Value: !Ref AsgSecurity
    Export:
      Name: !Sub ${Environment}-SecurityGroup-${Stack}-asg
